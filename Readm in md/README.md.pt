# Sistema de Gestão de Biblioteca em C#

## Descrição
Sistema de gestão de biblioteca desenvolvido em C# com duas interfaces: Web (MVC) e Desktop (Windows Forms).

## Estrutura do Projeto

- `Biblioteca.Core`: Biblioteca de classes partilhadas
- `Biblioteca.Web`: Aplicação Web MVC
- `Biblioteca.Desktop`: Aplicação Desktop Windows Forms

## Requisitos Prévios

- .NET 8.0
- Visual Studio 2022
- SQL Server (ou base de dados compatível)
- Entity Framework Core
- Windows Forms

## Configuração da Base de Dados

1. Criar base de dados SQL Server
2. Configurar string de ligação em `appsettings.json`
3. Executar migrações:
   ```bash
   dotnet ef database update
   ```

## Execução do Projeto

1. Restaurar dependências:
   ```bash
   dotnet restore
   ```

2. Compilar o projeto:
   ```bash
   dotnet build
   ```

3. Executar a aplicação:
   ```bash
   dotnet run
   ```

## Características Principais

### 1. Gestão de Livros
- Registo de livros
- Pesquisa e filtragem
- Empréstimos e devoluções
- Gestão de autores

### 2. Gestão de Utilizadores
- Registo de utilizadores
- Permissões e funções
- Histórico de empréstimos
- Gestão de multas

### 3. Sistema de Empréstimos
- Reservas de livros
- Gestão de datas
- Sistema de multas
- Histórico de empréstimos

### 4. Segurança
- Autenticação
- Autorização
- Funções e permissões
- Proteção CSRF

## Arquitetura

### 1. Camadas do Sistema

- **Apresentação**
  - Interface Web MVC
  - Interface Desktop
  - API REST

- **Negócio**
  - Serviços
  - Regras de negócio
  - Validações

- **Dados**
  - Entidades
  - Repositórios
  - Migrações

### 2. Tecnologias Utilizadas

- **Frontend**
  - ASP.NET Core MVC
  - Windows Forms
  - Bootstrap
  - jQuery

- **Backend**
  - .NET 8.0
  - Entity Framework Core
  - SQL Server
  - C#

- **Segurança**
  - Identity
  - JWT
  - HTTPS
  - CORS

## Guia de Desenvolvimento

### 1. Padrões de Código

- **Nomes**
  - Classes: PascalCase
  - Métodos: PascalCase
  - Variáveis: camelCase

- **Estrutura**
  - Separação de responsabilidades
  - Injeção de dependências
  - Padrões de design

### 2. Testes

- **Unitários**
  - NUnit
  - Moq
  - Cobertura de código

- **Integração**
  - Selenium
  - Postman
  - Testes de API

### 3. Documentação

- **Código**
  - XML Documentation
  - Swagger
  - Referência de API

- **Projeto**
  - Arquitetura
  - Requisitos
  - Guias de utilização

## Contribuição

1. Fork do repositório
2. Criar uma branch (`git checkout -b feature/AmazingFeature`)
3. Commit das alterações (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abrir Pull Request

## Licença

Este projeto está sob a Licença MIT - ver o arquivo LICENSE.md para detalhes
